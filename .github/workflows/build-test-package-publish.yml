name: build_test_package_publish

on:
  push:
    branches:
      - main
    tags:
      - "v*"

  pull_request:
    branches:
      - main

  workflow_dispatch:

# env:
#   ROBOT_CALL_TRACING_ENABLED: 1

jobs:
  test:
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
      - uses: actions/checkout@v3

      - name: setup python ${{ matrix.python-version }} environment
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --without dev --no-interaction --no-root

      - name: install robotcode
        run: poetry install --without dev --no-interaction

      - name: "test python packages"
        timeout-minutes: 15
        run: poetry run pytest "--junitxml=test-results/python-${{ matrix.python-version }}/test-results.xml" "--html=test-results/python-${{ matrix.python-version }}/report.html" --self-contained-html

      - name: upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
          path: test-results

  publish-test-results:
    needs: test
    runs-on: ubuntu-latest

    if: success() || failure()

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          junit_files: ./**/test-results.xml

  code-quality:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: setup python environment
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"

      - name: install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: install robotcode
        run: poetry install --no-interaction

      - run: poetry run isort --check --diff .
        if: always()

      - run: poetry run black --check --diff .
        if: always()

      - run: poetry run flake8 .
        if: always()

      - run: poetry run mypy .
        if: always()

  package:
    needs: [code-quality, test]

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - run: git describe --tag
      - run: git describe --tag --long --first-parent --match "v[0-9]*"

      - name: setup python environment
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"

      - name: install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: install robotcode
        run: poetry install --no-interaction

      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: "16"
          cache: "npm"
          cache-dependency-path: package-lock.json

      - name: install node modules
        run: npm install --also=dev

      - name: update versions from git
        if: ${{ !startsWith( github.ref, 'refs/tags/v') }}
        run: poetry run python ./scripts/update_git_versions.py

      - name: update doc links
        if: ${{ startsWith( github.ref, 'refs/tags/v') }}
        run: poetry run npm run update-doc-links

      - name: package
        run: poetry run npm run package

      - name: Upload VSCode package
        uses: actions/upload-artifact@v3
        with:
          name: vscode-package
          path: dist/robotcode*.vsix

      - name: Upload python package
        uses: actions/upload-artifact@v3
        with:
          name: python-package
          path: dist/*.tar.gz

      - name: Upload python wheel package
        uses: actions/upload-artifact@v3
        with:
          name: wheel-package
          path: dist/*.whl

  publish:
    runs-on: ubuntu-latest
    needs: package
    if: success() && startsWith( github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - run: git describe --tag

      - name: setup python environment
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"

      - name: install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: install robotcode
        run: poetry install --no-interaction

      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: "16"
          cache: "npm"
          cache-dependency-path: package-lock.json

      - name: install node modules
        run: npm install --also=dev

      - uses: actions/download-artifact@v3
        with:
          name: vscode-package
          path: dist
      - uses: actions/download-artifact@v3
        with:
          name: python-package
          path: dist
      - uses: actions/download-artifact@v3
        with:
          name: wheel-package
          path: dist

      - name: get release informations
        id: get_release_informations
        run: |
          poetry run npm run --silent extract-release-notes > ./auto_relnotes.md

          echo "is_prelease=$(poetry run npm run --silent is-prerelease)" >> $GITHUB_OUTPUT

      - name: create github release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "dist/*"
          prerelease: ${{ steps.get_release_informations.outputs.is_prelease }}
          bodyFile: ./auto_relnotes.md
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: publish vsix and python packages
        run: poetry run npm run publish
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}
          OVSX_PAT: ${{ secrets.OVSX_PAT }}
          PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
          PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
