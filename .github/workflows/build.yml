name: build_test_and_package

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

  workflow_dispatch:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10"]

    steps:
      - uses: actions/checkout@v2

      - name: setup python ${{ matrix.python-version }} environment
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - uses: Gr1N/setup-poetry@v7

      - run: pip install poetry-dynamic-versioning

      - run: poetry install

      - run: poetry-dynamic-versioning

      - name: "test python packages"
        run: poetry run pytest --junitxml=test-results/python-${{ matrix.python-version }}/test-results.xml --cov=robotcode --cov-report=xml:testresults/python-${{ matrix.python-version }}/coverage.xml --cov-report=html:test-results/python-${{ matrix.python-version }}/htmlcov

      - uses: actions/upload-artifact@v2
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
          path: test-results

  publish-test-results:
    needs: test
    runs-on: ubuntu-latest

    # the build-and-test job might be skipped, we don't need to run this job then
    if: success() || failure()

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        with:
          check_name: Unit Test Results
          github_token: ${{ secrets.GITHUB_TOKEN }}
          files: ./**/test-results.xml

  code-quality:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1

      - name: setup python environment
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - uses: Gr1N/setup-poetry@v7

      - run: pip install poetry-dynamic-versioning

      - run: poetry install

      - run: poetry-dynamic-versioning

      - run: poetry run isort --check --diff .
        if: always()

      - run: poetry run black --check --diff .
        if: always()

      - run: poetry run flake8 .
        if: always()

      - run: poetry run mypy .
        if: always()

  package:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - run: git describe --tag

      - name: Setup Node.js environment
        uses: actions/setup-node@v2
        with:
          node-version: "16"
      - uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - uses: Gr1N/setup-poetry@v7

      - run: pip install poetry-dynamic-versioning

      - run: poetry install

      - run: poetry-dynamic-versioning

      - name: Build Python packages
        run: poetry build

      - name: Build VSCode pacakge
        run: |
          npm install --also=dev
          npx vsce package -o dist/robotcode.vsix

      - name: Upload VSCode package
        uses: actions/upload-artifact@v2
        with:
          name: vscode-package
          path: dist/robotcode.vsix

      - name: Upload python package
        uses: actions/upload-artifact@v2
        with:
          name: python-package
          path: dist/*.tar.gz

      - name: Upload python wheel package
        uses: actions/upload-artifact@v2
        with:
          name: wheel-package
          path: dist/*.whl
