name: build_test_and_package

on:
  push:
    branches:
      - main
    tags:
      - "v*"

  pull_request:
    branches:
      - main

  workflow_dispatch:

# env:
#   ROBOT_CALL_TRACING_ENABLED: 1

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10"]

    steps:
      - uses: actions/checkout@v2

      - name: setup python ${{ matrix.python-version }} environment
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - uses: Gr1N/setup-poetry@v7

      - run: pip install poetry-dynamic-versioning

      - run: poetry install

      - name: "test python packages"
        timeout-minutes: 15
        run: poetry run pytest --junitxml=test-results/python-${{ matrix.python-version }}/test-results.xml --cov=robotcode --cov-report=xml:testresults/python-${{ matrix.python-version }}/coverage.xml --cov-report=html:test-results/python-${{ matrix.python-version }}/htmlcov --html=test-results/python-${{ matrix.python-version }}/report.html --self-contained-html

      - name: upload test results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
          path: test-results

  publish-test-results:
    needs: test
    runs-on: ubuntu-latest

    if: success() || failure()

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        with:
          check_name: Unit Test Results
          github_token: ${{ secrets.GITHUB_TOKEN }}
          files: ./**/test-results.xml

  code-quality:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1

      - name: setup python environment
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - uses: Gr1N/setup-poetry@v7

      - run: pip install poetry-dynamic-versioning

      - run: poetry install

      - run: poetry run isort --check --diff .
        if: always()

      - run: poetry run black --check --diff .
        if: always()

      - run: poetry run flake8 .
        if: always()

      - run: poetry run mypy .
        if: always()

  package:
    needs: [code-quality, test]

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - run: git describe --tag

      - name: Setup Node.js environment
        uses: actions/setup-node@v2
        with:
          node-version: "16"
      - uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - uses: Gr1N/setup-poetry@v7

      - run: pip install poetry-dynamic-versioning

      - run: poetry install

      - run: poetry-dynamic-versioning

      - name: install node modules
        run: npm install --also=dev

      - name: package
        run: poetry run npm package

      - name: Upload VSCode package
        uses: actions/upload-artifact@v2
        with:
          name: vscode-package
          path: dist/robotcode*.vsix

      - name: Upload python package
        uses: actions/upload-artifact@v2
        with:
          name: python-package
          path: dist/*.tar.gz

      - name: Upload python wheel package
        uses: actions/upload-artifact@v2
        with:
          name: wheel-package
          path: dist/*.whl

  publish:
    runs-on: ubuntu-latest
    needs: package
    if: success() && startsWith( github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - run: git describe --tag

      - name: Setup Node.js environment
        uses: actions/setup-node@v2
        with:
          node-version: "16"
      - uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - uses: Gr1N/setup-poetry@v7

      - run: pip install poetry-dynamic-versioning

      - run: poetry install

      - run: poetry-dynamic-versioning

      - name: install node modules
        run: npm install --also=dev

      - uses: actions/download-artifact@v2
        with:
          name: vscode-package
          path: dist
      - uses: actions/download-artifact@v2
        with:
          name: python-package
          path: dist
      - uses: actions/download-artifact@v2
        with:
          name: wheel-package
          path: dist

      - name: get release notes
        id: get_release_notes
        run: echo "::set-output name=release_notes::$(poetry run npm extract-release-notes)"

      - name: find assets
        id: find_assets
        run: |
          echo "::set-output name=vsix_file::$(find dist -iname '*.vsix')"
          echo "::set-output name=vsix_name::$(find dist -iname '*.vsix' -printf '%f\n')"

          echo "::set-output name=whl_file::$(find dist -iname '*.whl')"
          echo "::set-output name=whl_name::$(find dist -iname '*.whl' -printf '%f\n')"

          echo "::set-output name=tar_gz_file::$(find dist -iname '*.tar.gz')"
          echo "::set-output name=tar_gz_name::$(find dist -iname '*.tar.gz' -printf '%f\n')"

      - name: create github release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: ${{ steps.get_release_notes.outputs.release_notes }}
          draft: true
          prerelease: true

      - name: upload vsix asset to github release
        id: upload-vsix-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ${{ steps.find_assets.outputs.vsix_file }}
          asset_name: ${{ steps.find_assets.outputs.vsix_name }}
          asset_content_type: application/vsix

      - name: upload whl asset to github release
        id: upload-whl-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ${{ steps.find_assets.outputs.whl_file }}
          asset_name: ${{ steps.find_assets.outputs.whl_name }}
          asset_content_type: application/whl

      - name: upload tar.gz asset to github release
        id: upload-tar-gz-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ${{ steps.find_assets.outputs.tar_gz_file }}
          asset_name: ${{ steps.find_assets.outputs.tar_gz_name }}
          asset_content_type: application/whl

      - name: publish vsix and python packages
        run: poetry run npm publish
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}
          OVSX_PAT: ${{ secrets.OVSX_PAT }}
          PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
          PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
