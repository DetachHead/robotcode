{
    "name": "robotcode",
    "displayName": "robotcode",
    "description": "Robot Framework support for Visual Studio Code",
    "icon": "images/icon.png",
    "publisher": "d-biehl",
    "version": "0.1.0-alpha.3",
    "repository": {
        "type": "git",
        "url": "https://github.com/d-biehl/robotcode.git"
    },
    "engines": {
        "vscode": "^1.52.1"
    },
    "categories": [
        "Programming Languages",
        "Testing",
        "Debuggers",
        "Formatters"
    ],
    "keywords": [
        "Testing",
        "RobotFramework"
    ],
    "activationEvents": [
        "onLanguage:robotframework",
        "onCommand:robotcode.helloWorld",
        "onCommand:robotcode.runTestcase",
        "onCommand:robotcode.debugTestcase",
        "onCommand:robotcode.runSuite",
        "onCommand:robotcode.debugSuite"
    ],
    "main": "./out/extension.js",
    "contributes": {
        "languages": [
            {
                "id": "robotframework",
                "aliases": [
                    "Robot Framework",
                    "robotframework"
                ],
                "extensions": [
                    ".robot",
                    ".resource"
                ],
                "configuration": "./language-configuration.json"
            }
        ],
        "grammars": [
            {
                "language": "robotframework",
                "scopeName": "source.robotframework",
                "path": "./syntaxes/robotframework.tmLanguage.json"
            }
        ],
        "configuration": [
            {
                "title": "RobotCode",
                "type": "object",
                "properties": {
                    "robotcode.language-server.mode": {
                        "type": "string",
                        "default": "stdio",
                        "description": "Specifies the mode the language server is started. Requires a VSCode restart to take effect.",
                        "enum": [
                            "stdio",
                            "tcp"
                        ],
                        "scope": "resource"
                    },
                    "robotcode.language-server.tcp-port": {
                        "type": "number",
                        "default": 0,
                        "description": "If the port is specified, connect to the language server previously started at the given port. Requires a VSCode restart to take effect.",
                        "scope": "resource"
                    },
                    "robotcode.language-server.args": {
                        "type": "array",
                        "default": [],
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies the arguments to be passed to the language server (i.e.: [\"--log\", \"--log-file=~/robotcode.log\"]). Requires a VSCode restart to take effect.",
                        "scope": "resource"
                    },
                    "robotcode.language-server.python": {
                        "type": "string",
                        "default": "",
                        "description": "Specifies the path to the python executable to be used for the Language Server. If no path is specified, try to get it from \"python\" extension. Requires a VSCode restart to take effect.",
                        "scope": "resource"
                    },
                    "robotcode.robot.args": {
                        "type": "array",
                        "default": [
                            "--outputdir",
                            "results"
                        ],
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies the arguments to be passed to robot module.",
                        "scope": "resource"
                    },
                    "robotcode.robot.pythonpath": {
                        "type": "array",
                        "default": [
                            "./lib",
                            "./resources"
                        ],
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies additional python paths to robotframework. Corresponds to the '--pythonpath' option of the robot module.",
                        "scope": "resource"
                    },
                    "robotcode.robot.environment": {
                        "type": "object",
                        "default": {},                        
                        "description": "Specifies the environment variables for robotframework.",
                        "scope": "resource"
                    },
                    "robotcode.robot.variables": {
                        "type": "object",
                        "default": {},                        
                        "description": "Specifies the variables for robotframework. Corresponds to the '--variable name:value' option of the robot module.",
                        "scope": "resource"
                    },
                    "robotcode.syntax.section_style": {
                        "type": "string",
                        "default": "*** {name} ***",
                        "description": "Defines the section style format.",
                        "scope": "resource"
                    },
                    "robotcode.robocop.enabled": {
                        "type": "boolean",
                        "default": true,
                        "description": "Enables 'robocop' code analysis, if installed.",
                        "scope": "resource"
                    },
                    "robotcode.robocop.include": {
                        "type": "array",
                        "default": [],
                        "items": {
                            "type": "string"
                        },
                        "description": "Ignore specified 'robocop' rules. You can define rule by its name or id. Glob patterns are supported",
                        "scope": "resource"
                    },
                    "robotcode.robocop.exclude": {
                        "type": "array",
                        "default": [
                            "1001",
                            "1002",
                            "1010",
                            "0704"
                        ],
                        "items": {
                            "type": "string"
                        },
                        "description": "Ignore specified 'robocop' rules. You can define rule by its name or id. Glob patterns are supported",
                        "scope": "resource"
                    },
                    "robotcode.robocop.configurations": {
                        "type": "array",
                        "default": [],
                        "items": {
                            "type": "string"
                        },
                        "description": "Configure 'robocop' checker with parameter value.",
                        "scope": "resource"
                    }
                }
            }
        ],
        "commands": [
            {
                "command": "robotcode.helloWorld",
                "category": "RobotCode",
                "title": "Hello World"
            },
            {
                "command": "robotcode.runSuite",
                "category": "RobotCode",
                "title": "Run Suite",
                "icon": {
                    "light": "resources/light/run_suite.svg",
                    "dark": "resources/dark/run_suite.svg"
                }
            },
            {
                "command": "robotcode.debugSuite",
                "category": "RobotCode",
                "title": "Debug Suite",
                "icon": {
                    "light": "resources/light/debug_suite.svg",
                    "dark": "resources/dark/debug_suite.svg"
                }
            },
            {
                "command": "robotcode.runTest",
                "category": "RobotCode",
                "title": "Run Test",
                "icon": {
                    "light": "resources/light/run_test.svg",
                    "dark": "resources/dark/run_test.svg"
                }
            },
            {
                "command": "robotcode.debugTest",
                "category": "RobotCode",
                "title": "Debug Test",
                "icon": {
                    "light": "resources/light/debug_test.svg",
                    "dark": "resources/dark/debug_test.svg"
                }
            }
        ],
        "menus": {
            "editor/title": [
                {
                    "command": "robotcode.runSuite",
                    "title": "Run Testsuite",
                    "group": "1_run@1",
                    "when": "resourceLangId == robotframework && resourceExtname == .robot && !isInDiffEditor"
                },
                {
                    "command": "robotcode.debugSuite",
                    "title": "Debug Testsuite",
                    "group": "1_run@2",
                    "when": "resourceLangId == robotframework && resourceExtname == .robot && !isInDiffEditor"
                }
            ],
            "explorer/context": [
                {
                    "command": "robotcode.runSuite",
                    "title": "Run Testsuite",
                    "group": "robot@1",
                    "when": "resourceLangId == robotframework && resourceExtname == .robot || explorerResourceIsFolder"
                },
                {
                    "command": "robotcode.debugSuite",
                    "title": "Debug Testsuite",
                    "group": "robot@2",
                    "when": "resourceLangId == robotframework && resourceExtname == .robot || explorerResourceIsFolder"
                }
            ]
        }
    },
    "scripts": {
        "vscode:prepublish": "webpack --mode production",
        "webpack": "webpack --mode development",
        "webpack-dev": "webpack --mode development --watch",
        "test-compile": "tsc -p ./",
        "compile": "tsc -p ./",
        "watch": "tsc -watch -p ./",
        "pretest": "npm run compile && npm run lint",
        "lint": "eslint src --ext ts",
        "test": "node ./out/test/runTest.js"
    },
    "extensionDependencies": [
        "ms-python.python"
    ],
    "dependencies": {
        "vscode-languageclient": "^7.0.0"
    },
    "devDependencies": {
        "@types/glob": "^7.1.3",
        "@types/mocha": "^8.0.0",
        "@types/node": "^14.14.21",
        "@types/vscode": "^1.52.0",
        "@typescript-eslint/eslint-plugin": "^4.12.0",
        "@typescript-eslint/parser": "^4.12.0",
        "eslint": "^7.17.0",
        "glob": "^7.1.6",
        "mocha": "^8.1.3",
        "ts-loader": "^8.0.17",
        "typescript": "^4.1.3",
        "vscode-test": "^1.4.0",
        "webpack": "^5.24.4",
        "webpack-cli": "^4.5.0"
    }
}